name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          # Stable release (e.g., 1.0.0, 2.1.3)
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        elif [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)$ ]]; then
          # Pre-release (e.g., 1.0.0-beta.1, 1.0.0-preview.1)
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          # Default to stable for other formats
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

  build-and-pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: determine-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
    
    - name: Build with version
      run: dotnet build --configuration Release --no-restore -p:ItemsCacheVersion=${{ needs.determine-version.outputs.version }}
    
    - name: Pack packages
      run: dotnet pack --configuration Release --no-build --output ./packages
    
    - name: Validate packages
      run: |
        for package in ./packages/*.nupkg; do
          echo "Validating package: $package"
          # Basic validation - check if package exists and has correct structure
          if [ -f "$package" ]; then
            echo "✅ Package exists: $package"
            # Extract and check package contents
            unzip -l "$package" | head -20
            echo "✅ Package structure validated"
          else
            echo "❌ Package not found: $package"
            exit 1
          fi
        done
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: ./packages/*.nupkg
        retention-days: 30

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-pack]
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: ./packages
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish to NuGet.org
      run: |
        for package in ./packages/*.nupkg; do
          echo "Publishing package: $package"
          dotnet nuget push "$package" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source "${{ env.NUGET_SOURCE }}" \
            --skip-duplicate
        done

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-pack, publish-nuget]
    if: always() && needs.publish-nuget.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: ./packages
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from $PREVIOUS_TAG to ${{ needs.determine-version.outputs.version }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          echo "No previous tag found, generating full changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      run: |
        gh release create "v${{ needs.determine-version.outputs.version }}" \
          --title "Release v${{ needs.determine-version.outputs.version }}" \
          --notes "## Changes
        ${{ steps.changelog.outputs.changelog }}
        
        ## Packages
        - ItemsCache.Core.Abstraction
        - ItemsCache.Core
        - ItemsCache.Refresh.Abstraction
        - ItemsCache.Refresh.Core
        - ItemsCache.Refresh.Polling.Abstraction
        - ItemsCache.Refresh.Polling
        - ItemsCache.RetryPolicy.Abstraction
        - ItemsCache.RetryPolicy.Polly
        - ItemsCache.All" \
          ${{ needs.determine-version.outputs.is-prerelease == 'true' && '--prerelease' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
